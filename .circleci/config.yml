# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/suri-rails
    docker:
    - image: circleci/buildpack-deps:stretch
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.4-stretch
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          NOKOGIRI_USE_SYSTEM_LIBRARIES: true

    working_directory: ~/repo

    steps:
      - checkout

      # Upgrade bundler
      - run:
          name: Install Bundler
          command: gem install bundler

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Download and cache dependencies
      - restore_cache:
          keys:
            - suri-rails-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - suri-rails-dependencies-

      - run:
          name: install dependencies
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: dor-services-app-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: Test prepare
          command: bin/rails db:test:prepare

      - run:
          name: Check styles using rubocop
          command: bundle exec rubocop

      # Run rspec in parallel
      - run:
          name: Run rspec in parallel
          command: |
            ./cc-test-reporter before-build
            bundle exec rspec --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?

      # Save test results for timing analysis
      - store_test_results:
          path: test_results

  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          docker build -t $IMAGE_NAME:latest .
    - run:
        name: Archive Docker image
        command: |
          docker save -o app_image.tar $IMAGE_NAME
    - persist_to_workspace:
        root: .
        paths:
        - ./app_image.tar
  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
          docker push $IMAGE_NAME:$CIRCLE_TAG
workflows:
  version: 2

  test:
    jobs:
    - test:
        filters:
          branches:
            ignore: master

  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: master
    - publish-latest:
        requires:
        - build-image
        filters:
          branches:
            only: master
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
        - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
